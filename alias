# Aliases
# =======

# Make destructive commands a little safer.
#alias rm="rm -i"
alias mv="mv -i"
alias cp="cp -i"

# Make human readable output default for a few commands.
alias df="df -h"
alias du="du -sh"

# Map vi to vim
alias vi="vim"

# 'ls' Aliases. Colourise output by default.
# long:
alias l="ls"
alias ll="ls -lh"
alias lll="ls -lh | less"

# 1:
alias l1="ls -1"
alias l1l="ls -1 | less"

# all:
alias la="ls -a"
alias lla="ls -lah"
alias llahl="ls -lah | less"
alias lal="ls -a | less"

# 1 & all:
alias l1a="ls -1a"
alias l1al="ls -1a | less"

alias mplayer="mplayer -fs -zoom"

alias be="bundle exec "

# Functions
# =========

sshfs(){
  FOLDER=$(echo ${@} | cut -d ':' -f 1)
  mkdir -p /Volumes/${FOLDER}
  `which sshfs` -o transform_symlinks $@ /Volumes/${FOLDER}
  echo "Volume mounted on /Volumes/${FOLDER}"
  pushd /Volumes/${FOLDER}
}
alias unmount_all="pushd ~/ &>/dev/null && find /Volumes -mindepth 1 -maxdepth 1 -type d -exec umount {} \; && popd &>/dev/null"

# forever() executes its argument in an infinite loop. Useful for
# monitoring things. Note it will not work with aliases.
forever() {
	while true; do
		clear
		$@
		sleep 1
	done
}

# Overwrite svn diff to get colors 
svn() {
	if [ "$1" = "diff" ]; then
		/usr/bin/svn "$@" | vim -R -c 'set nonu' -
	else
		/usr/bin/svn "$@"
	fi
}

cal(){
	if [ "$1" = `date +%Y` ]; then 
		/usr/bin/cal $1 | sed -e "s/$(date +%e) /`echo -e \\\033\[31m`&`echo -e \\\033\[0m`/g" -e "s/$(date +%B)/`echo -e \\\033\[5\;33m`&`echo -e \\\033\[0m`/g"
	elif [ $# = 0 ]; then 
		/usr/bin/cal | awk '{ print " "$0; getline; print " Mo Tu We Th Fr Sa Su"; getline; if (substr($0,1,2) == " 1") print "                    1 "; do { prevline=$0; if (getline == 0) exit; print " " substr(prevline,4,17) " " substr($0,1,2) " "; } while (1) }' | sed -E '1,$'"s/(^|[^0-9])($(date +%e))([^0-9]|$)/\1$(echo -e '\033[1;31m')\2$(echo -e '\033[0m')\3/";
	else 
		/usr/bin/cal "$@";
	fi
}

notify()
{
    # run a subshell in the foreground in order to protect
    # the current (shell) process from the second exec
    (
        # fork another shell in the background
        exec $SHELL -c '
            # wait for parent to exit
            while [ `ps -o ppid= $$` -ne 1 ] ; do
                sleep 1;
            done; 
            # echo an alarm escape to the terminal
            echo -ne "\a" \
        ' &

        # execute the supplied command
        # this replaces the subshell process
        exec "$@"
    )
}

# Make directory and move into it
mkcd(){
	mkdir -p "$@" && eval cd "\"\$$#\"";
}

git_diff(){
	git diff --no-ext-diff -w "$@" | vim -R -
}

diffdir(){
	vimdiff <(cd $1 && find . | sort) <(cd $2 && find . | sort)
}

# extract files. Ignore files with improper extensions.
extract(){
	local x
	ee() { # echo and execute
		echo "$@"
		$1 "$2"
	}
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   ee "tar xvjf" $1    ;;
			*.tar.gz)    ee "tar xvzf" $1    ;;
			*.bz2)       ee "bunzip2" $1     ;;
			*.rar)       ee "unrar x" $1       ;;
			*.gz)        ee "gunzip" $1      ;;
			*.tar)       ee "tar xvf" $1     ;;
			*.tbz2)      ee "tar xvjf" $1    ;;
			*.tgz)       ee "tar xvzf" $1    ;;
			*.zip)       ee "unzip" $1       ;;
			*.Z)         ee "uncompress" $1  ;;
			*.7z)        ee "7z x" $1        ;;
			*)           echo "don't know how to extract '$1'..." ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

up(){
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++))
		do
			d=$d/..
		done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

psgrep(){                                         
   ps aux | grep $(echo $1 | sed "s/^\(.\)/[\1]/g")
 }                                                 

# Jumping with symlinks
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html

export MARKPATH=$HOME/.marks

function jump { 
  cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
  mkdir -p "$MARKPATH"; 
  ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
  rm -i "$MARKPATH/$1"
}
function marks {
  if [[ $(uname) == "Darwin" ]]; then
    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
  else
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
  fi
}

# End of jumping with symlinks

func mfaws() {
  # docker run -it -v ~/.aws/:/root/.aws pbar1/mfaws:latest --force -t $(ykman oath code | awk '{print $4}')
  $GOPATH/bin/mfaws --force -t $(/usr/local/bin/ykman oath code 'Amazon Web Services' -s)
}

# now prints out the current time in the RFC3339 format
function now(){
  date -u +"%Y-%m-%dT%H:%M:%SZ"
}

func zoom-restart() {
  sudo killall VDCAssistant
}

rand-string() {
  LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | fold -w ${1:-32} | head -n 1
}

test_all() { 
  export BRANCH=$(git branch --show-current)
  git branch ${BRANCH}-debug master && git checkout ${BRANCH}-debug
  for i in $(git log --reverse ${BRANCH}...HEAD --oneline | awk '{print $1}'); do 
    git cherry-pick $i && git push
  done
  unset BRANCH
}

tor() { 
  socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
  TOR_PID=$!
  docker run -e DISPLAY=host.docker.internal:0 -v /tmp/.X11-unix:/tmp/.X11-unix jess/tor-browser
  kill ${TOR_PID}
}

alias awslocal="aws --endpoint-url http://0.0.0.0:4566"

function ssh_ec2(){
    AWS_USER=${AWS_USER=ec2-user}
    TEMP=$(mktemp)
    aws ec2 describe-instances --instance-ids "$1" > $TEMP || echo "Fail to get $1" || return
    AVAILABILITY_ZONE=$(cat $TEMP |jq ".Reservations[].Instances[].Placement.AvailabilityZone" -r)
    PUBLIC_IP=$(cat $TEMP | jq ".Reservations[].Instances[].NetworkInterfaces[].Association.PublicIp" -r)
    aws ec2-instance-connect send-ssh-public-key --region $AWS_DEFAULT_REGION --instance-id $1 --availability-zone $AVAILABILITY_ZONE --instance-os-user $AWS_USER --ssh-public-key file://$HOME/.ssh/id_rsa.pub || echo "Failed to send ssh key" || return
    echo "Logging in $PUBLIC_IP as $AWS_USER"
    ssh $AWS_USER@$PUBLIC_IP -v && echo "Install apt-get install -y ec2-instance-connect at $1"
}
